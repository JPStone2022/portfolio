Deploying Your Django Portfolio to PythonAnywhereThis guide outlines the typical steps to deploy your Django project. PythonAnywhere's own documentation is also an excellent resource.1. Prerequisites:PythonAnywhere Account: Sign up for an account (free tier is available and often sufficient for portfolios).Git: Your project code should be managed with Git and hosted on a platform like GitHub, GitLab, or Bitbucket. This is the easiest way to get your code onto PythonAnywhere.requirements.txt: Ensure you have an up-to-date file listing all your project's dependencies. Create or update it in your project directory:pip freeze > requirements.txt
Make sure it includes Django, Pillow, and any other libraries you used (like psycopg2-binary if you were planning to switch to PostgreSQL later, though you can often start with SQLite on PythonAnywhere's free tier).2. Code Preparation (Before Uploading):settings.py for Production: You'll need to adjust settings for the live environment. It's common practice to have separate settings files or use environment variables, but for simplicity, you can modify your existing settings.py carefully before pushing the final version to Git:DEBUG = False: Crucial for security.SECRET_KEY: Keep this secret! Do not commit your actual production secret key to Git. PythonAnywhere sets an environment variable SECRET_KEY which you can use:import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-default-development-key-if-env-var-not-set')
(Replace the default key with something random if needed for local testing when the env var isn't set).ALLOWED_HOSTS: Set this to include your PythonAnywhere domain name (e.g., ['yourusername.pythonanywhere.com']). You can add more domains later if you get a custom one.STATIC_ROOT: Ensure this is set, as PythonAnywhere uses it. The previous setting is fine:STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_ROOT & MEDIA_URL: These will work for uploading files via the admin, but serving them directly from MEDIA_ROOT in production via Django is inefficient and not recommended. See Step 7 below for handling media files.Commit Changes: Add your requirements.txt and the modified settings.py (with DEBUG=False and ALLOWED_HOSTS set) to Git and commit the changes. Push them to your remote repository (GitHub, etc.).3. PythonAnywhere Setup:Create a Web App:Log in to PythonAnywhere.Go to the "Web" tab.Click "Add a new web app".Follow the prompts. Choose "Manual configuration" (NOT the "Django" option, as it sets up an older structure).Select the Python version matching your project (e.g., Python 3.10, 3.11).Get Your Code:Open a "Bash console" from the PythonAnywhere "Consoles" tab.Clone your Git repository:git clone https://github.com/your-username/your-repo-name.git
This will create a directory named after your repo (e.g., dl_portfolio_project).Set Up Virtual Environment:PythonAnywhere usually prompts you to create a virtual environment when setting up the web app manually, or you can create one in the Bash console. It's recommended to use one. Navigate to your project directory in the console.Use the "Virtualenv" section on the "Web" tab to specify the path to your virtual environment (e.g., /home/yourusername/.virtualenvs/myenv).Activate the virtualenv in your Bash console (the command might differ slightly):source ~/.virtualenvs/myenv/bin/activate # Or the path you chose
Install Requirements:Make sure your virtualenv is active in the console.Navigate into your cloned project directory (e.g., cd dl_portfolio_project).Install the dependencies:pip install -r requirements.txt
Configure WSGI File:Go back to the PythonAnywhere "Web" tab.Find the "Code" section and click on the "WSGI configuration file" link (it will be something like /var/www/yourusername_pythonanywhere_com_wsgi.py).Edit the file. Replace the entire contents with something like this, adjusting paths as needed:# +++++++++++ DJANGO +++++++++++
import os
import sys
from pathlib import Path

# Assuming your project structure is /home/yourusername/dl_portfolio_project/
# where manage.py is located.

# Path to the directory containing manage.py
path = Path('/home/yourusername/dl_portfolio_project') # CHANGE yourusername and repo name
if str(path) not in sys.path:
    sys.path.insert(0, str(path))

# Path to the directory containing settings.py (dl_portfolio_project/dl_portfolio_project)
settings_path = path / 'dl_portfolio_project' # CHANGE if your inner project dir name is different
if str(settings_path) not in sys.path:
    sys.path.insert(0, str(settings_path))

# Set the DJANGO_SETTINGS_MODULE environment variable
os.environ['DJANGO_SETTINGS_MODULE'] = 'dl_portfolio_project.settings' # CHANGE if inner dir name is different

# Activate your virtual environment if it's not already activated by PA
# pythonanywhere_virtualenv = '/home/yourusername/.virtualenvs/myenv/bin/activate_this.py' # CHANGE path if needed
# try:
#     with open(pythonanywhere_virtualenv) as f:
#         code = compile(f.read(), pythonanywhere_virtualenv, 'exec')
#         exec(code, dict(__file__=pythonanywhere_virtualenv))
# except FileNotFoundError:
#     pass # Handle case where virtualenv activation file isn't found

# Import the Django WSGI application handler
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()
Crucially: Replace yourusername with your actual PythonAnywhere username and ensure the paths (/home/yourusername/dl_portfolio_project) and the settings module (dl_portfolio_project.settings) match your project structure exactly.Save the file.Configure Static Files:On the "Web" tab, go to the "Static files" section.Enter the URL: /static/Enter the Directory path: /home/yourusername/dl_portfolio_project/staticfiles (This should match your STATIC_ROOT setting, adjust yourusername and project name).Database (If Using SQLite - Free Tier):SQLite usually works out of the box on the free tier. The db.sqlite3 file will be created within your project directory when you run migrations. Ensure your settings.py points to it correctly (the default usually works).Database (If Using PostgreSQL/MySQL - Paid Accounts):Go to the "Databases" tab on PythonAnywhere to create a PostgreSQL or MySQL database and set a password.Update the DATABASES setting in your settings.py with the connection details provided by PythonAnywhere (host, name, user, password). Remember to install the appropriate adapter (psycopg2-binary or mysqlclient) via pip in your virtualenv.Run Migrations & Collect Static:Go back to your Bash console (with the virtualenv activated and inside your project directory).Run database migrations:python manage.py migrate
Collect all static files into STATIC_ROOT:python manage.py collectstatic --noinput
Reload Web App:Go to the "Web" tab on PythonAnywhere.Click the big green "Reload yourusername.pythonanywhere.com" button.4. Handling Media Files (Certificate PDFs, etc.):The Challenge: PythonAnywhere, like most production environments, doesn't automatically serve files from your MEDIA_ROOT the way the Django development server does. The configuration we added to urls.py for development (if settings.DEBUG: ...) won't run when DEBUG=False.Option 1 (Simplest for Low Traffic - Manual Step):Upload certificate PDFs via the admin as usual. They will be saved to your mediafiles directory on PythonAnywhere.Set up another Static Files mapping on the PythonAnywhere "Web" tab:URL: /media/ (matching your MEDIA_URL)Directory: /home/yourusername/dl_portfolio_project/mediafiles (matching your MEDIA_ROOT, adjust paths)Limitation: This mapping only serves files that exist when you reload the web app. If you upload a new PDF via the admin, it won't be immediately accessible until you reload the web app again. This might be acceptable for a portfolio updated infrequently.Option 2 (Use Cloud Storage - Recommended for Scalability):Use a service like AWS S3, Google Cloud Storage, etc.Install and configure django-storages.Configure Django to save media files directly to the cloud bucket. Files will then be served directly from the cloud storage URL, bypassing your PythonAnywhere server. This is more complex to set up initially but is the standard production approach.Option 3 (Serve via Django - Not Recommended): Use libraries like whitenoise to serve media files, but this puts extra load on your application server.5. Testing:Visit yourusername.pythonanywhere.com. Your site should load.Test all pages, including project details and certificates.Check if static files (CSS, logo) load correctly.Check if links to uploaded certificate PDFs work (depending on which media file option you chose).Check the error log (linked on the "Web" tab) if you encounter problems (e.g., 500 errors).Deployment involves several moving parts. Follow the steps carefully, double-check your paths and settings, and consult the PythonAnywhere documentation if you get stuck on a specific step.